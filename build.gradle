plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id "org.spongepowered.mixin" version "0.7.+"
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
    id 'com.github.johnrengelman.shadow' version "${shadow_version}"
    id 'maven-publish'
}

var mod_version = mcef_version

archivesBaseName = project.archives_base_name
version = mod_version
group = mod_packagename

java {
    withJavadocJar()
    withSourcesJar()
    toolchain.languageVersion = JavaLanguageVersion.of(java_version as int)
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
        }
        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.console.level', 'debug'
            arg '--nogui'
        }
    }
}

mixin {
    add sourceSets.main, 'mcef.refmap.json'
    config 'mcef.mixins.json'
}

sourceSets {
    jcef {
        java {
            srcDir "java-cef/java"
            exclude "**/tests/**"
        }
    }

    main {
        compileClasspath += jcef.output
        runtimeClasspath += jcef.output
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources.dependsOn(processJcefResources)

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

processResources {
    filesMatching('**/*.toml') {
        expand 'mod_id': mod_id,
                'mod_version': mod_version,
                'mod_name': mod_name,
                'forge_loader_requirement': forge_loader_requirement,
                'forge_requirement': forge_requirement,
                'minecraft_version': minecraft_version
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    from sourceSets.jcef.output.classesDirs
    from sourceSets.jcef.output.resourcesDir

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(['Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_vendor,
                    'Specification-Version'   : "1",
                    'Implementation-Title'    : mod_name,
                    'Implementation-Version'  : mod_version,
                    'Implementation-Vendor'   : mod_vendor,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'java-cef-commit'         : "d5e3cece98755ff1e5af39261e6a486a5d9adb5d"
        ])
    }
}

tasks.register('deobfJar', Jar) {
    archiveClassifier = 'deobf'
    from sourceSets.main.output
    from sourceSets.jcef.output
}

jar.finalizedBy('reobfJar')

artifacts {
    archives deobfJar
}

publishing {
    publications {
        mcef(MavenPublication){
            from components.java
            artifactId "mcef"
        }

        mcefDeobf(MavenPublication){
            artifactId "mcef-deobf"
            artifact ("/build/libs/mcef-forge-" + version + "-deobf.jar")
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        maven {
            name = "repsy"
            credentials{
                username repsyUsername
                password repsyPassword
            }

            url = 'https://repo.repsy.io/mvn/javaracing/mcef'
        }
    }
}